{"version":3,"file":"static/js/random-picker-page.3daf48e8.chunk.js","mappings":"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","sources":["pages/random-picker/random-picker.tsx"],"sourcesContent":["import {\n  Button,\n  FormControlLabel,\n  Grid,\n  Radio,\n  RadioGroup,\n  TextField,\n  Typography,\n} from \"@mui/material\";\nimport isString from \"lodash/isString\";\nimport range from \"lodash/range\";\nimport React, { useEffect, useState } from \"react\";\n\nconst generateRandomNumber = (min: number, max: number): number =>\n  Math.floor(Math.random() * (max - min + 1) + min);\n\nconst generateRandomNumberWithExclusion = (\n  min: number,\n  max: number,\n  list: Array<number>\n): number => {\n  const random = generateRandomNumber(min, max);\n  if (!list.includes(random)) {\n    return random;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  return generateRandomNumberWithExclusion(min, max, list);\n};\n\nexport const RandomPickerPage = () => {\n  const [startValue, setStartValue] = useState<number>(1);\n  const [endValue, setEndValue] = useState<number>(10);\n  const [randomNumber, setRandomNumber] = useState<number | null>(null);\n  const [repeat, setRepeat] = useState<boolean>(true);\n  const [randomNumberList, setRandomNumberList] = useState<Array<number>>([]);\n  const [remainingNumberList, setRemainingNumerList] = useState<Array<number>>(\n    []\n  );\n  const areValuesInvalid = endValue <= startValue;\n\n  useEffect(() => {\n    const random = localStorage.getItem(\"randomNumber\");\n    const randomList =\n      localStorage\n        .getItem(\"randomNumberList\")\n        ?.split(\", \")\n        .map((val) => Number(val)) || [];\n    const newRemainingNumberList =\n      localStorage\n        .getItem(\"remainingNumberList\")\n        ?.split(\", \")\n        .map((val) => Number(val)) || [];\n    const getRepeat = localStorage.getItem(\"repeat\");\n    const start = localStorage.getItem(\"startNumber\");\n    const end = localStorage.getItem(\"endNumber\");\n    !start && localStorage.setItem(\"startNumber\", \"1\");\n    !end && localStorage.setItem(\"endNumber\", \"10\");\n    !getRepeat && localStorage.setItem(\"repeat\", \"true\");\n    setStartValue(isString(start) ? Number(start) : 1);\n    setEndValue(isString(end) ? Number(end) : 10);\n    setRandomNumber(isString(random) ? Number(random) : null);\n    setRandomNumberList(randomList);\n    setRemainingNumerList(newRemainingNumberList);\n    setRepeat(getRepeat ? getRepeat === \"true\" : true);\n  }, []);\n\n  const handleChange = (\n    event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>,\n    component: string\n  ) => {\n    const value = event.target.value;\n\n    switch (component) {\n      case \"start\":\n        setStartValue(Number(value));\n        localStorage.setItem(\"startNumber\", value);\n        break;\n      case \"end\":\n        setEndValue(Number(value));\n        localStorage.setItem(\"endNumber\", value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleGenerate = () => {\n    if (repeat) {\n      const random = generateRandomNumber(startValue, endValue);\n      setRandomNumber(random);\n      localStorage.setItem(\"randomNumber\", String(random));\n    } else {\n      const random = generateRandomNumberWithExclusion(\n        startValue,\n        endValue,\n        randomNumberList\n      );\n\n      const newList = [...randomNumberList, random];\n      const remainingNewlist = range(startValue, endValue + 1).filter(\n        (item) => !newList.includes(item)\n      );\n      setRandomNumberList(newList);\n      setRemainingNumerList(remainingNewlist);\n      localStorage.setItem(\"randomNumberList\", newList.join(\", \"));\n      localStorage.setItem(\"remainingNumberList\", remainingNewlist.join(\", \"));\n    }\n  };\n\n  const handleReset = () => {\n    localStorage.removeItem(\"randomNumber\");\n    localStorage.removeItem(\"randomNumberList\");\n    localStorage.removeItem(\"remainingNumberList\");\n    localStorage.setItem(\"repeat\", \"true\");\n    localStorage.setItem(\"startNumber\", \"1\");\n    localStorage.setItem(\"endNumber\", \"10\");\n    setRepeat(true);\n    setStartValue(1);\n    setEndValue(10);\n    setRandomNumber(null);\n    setRandomNumberList([]);\n  };\n\n  return (\n    <Grid container spacing={3} flexDirection=\"column\">\n      <Grid item>\n        <Typography variant=\"h4\">Random Picker</Typography>\n      </Grid>\n      <Grid item>\n        <Typography variant=\"body2\" marginBottom={1}>\n          Closing the page will <b>Reset</b> the data.\n        </Typography>\n        <RadioGroup\n          row\n          aria-labelledby=\"demo-radio-buttons-group-label\"\n          value={repeat}\n          onChange={() => {\n            setRepeat((r) => !r);\n            localStorage.setItem(\"repeat\", String(!repeat));\n          }}\n        >\n          <FormControlLabel value={true} control={<Radio />} label=\"Repeat\" />\n          <FormControlLabel\n            value={false}\n            control={<Radio />}\n            label=\"Do Not Repeat\"\n          />\n        </RadioGroup>\n      </Grid>\n      <Grid container item spacing={3}>\n        <Grid item sm={5} xs={5}>\n          <TextField\n            error={areValuesInvalid}\n            label=\"Start number\"\n            onChange={(e) => handleChange(e, \"start\")}\n            type=\"number\"\n            value={startValue}\n            variant=\"outlined\"\n            helperText={\n              areValuesInvalid\n                ? \"End value cannot be less than start value\"\n                : undefined\n            }\n          />\n        </Grid>\n        <Grid item sm={5} xs={5}>\n          <TextField\n            error={areValuesInvalid}\n            helperText={\n              areValuesInvalid\n                ? \"End value cannot be less than start value\"\n                : undefined\n            }\n            label=\"End number\"\n            onChange={(e) => handleChange(e, \"end\")}\n            type=\"number\"\n            value={endValue}\n            variant=\"outlined\"\n          />\n        </Grid>\n      </Grid>\n      <Grid container item spacing={3}>\n        <Grid item>\n          <Button\n            variant=\"contained\"\n            onClick={handleGenerate}\n            disabled={\n              areValuesInvalid ||\n              (!repeat && endValue === randomNumberList.length)\n            }\n          >\n            Generate\n          </Button>\n        </Grid>\n        <Grid item>\n          <Button\n            variant=\"contained\"\n            onClick={handleReset}\n            disabled={!(randomNumber || randomNumberList)}\n          >\n            Reset\n          </Button>\n        </Grid>\n      </Grid>\n      {(repeat ? randomNumber : randomNumberList.length) && (\n        <>\n          <Grid item>\n            <Typography variant=\"body1\">\n              {repeat\n                ? `${randomNumberList.length} Generated number is ${randomNumber}`\n                : `${\n                    randomNumberList.length\n                  } Generated numbers are ${randomNumberList.join(\", \")}`}\n            </Typography>\n          </Grid>\n          {!repeat && Boolean(remainingNumberList.length) && (\n            <Grid item>\n              <Typography variant=\"body1\">\n                {`${\n                  remainingNumberList.length\n                } Remaining numbers are ${remainingNumberList.join(\", \")}`}\n              </Typography>\n            </Grid>\n          )}\n        </>\n      )}\n      {!repeat && endValue === randomNumberList.length ? (\n        <Grid item>\n          <Typography variant=\"h5\" marginBottom={2}>\n            All numbers are generated\n          </Typography>\n        </Grid>\n      ) : null}\n    </Grid>\n  );\n};\n"],"names":["generateRandomNumber","min","max","Math","floor","random","generateRandomNumberWithExclusion","list","includes","RandomPickerPage","useState","startValue","setStartValue","endValue","setEndValue","randomNumber","setRandomNumber","repeat","setRepeat","randomNumberList","setRandomNumberList","remainingNumberList","setRemainingNumerList","areValuesInvalid","useEffect","localStorage","getItem","randomList","split","map","val","Number","newRemainingNumberList","getRepeat","start","end","setItem","isString","handleChange","event","component","value","target","container","spacing","flexDirection","item","variant","marginBottom","row","onChange","r","String","control","label","sm","xs","error","e","type","helperText","undefined","onClick","newList","remainingNewlist","range","filter","join","disabled","length","removeItem","Boolean"],"sourceRoot":""}