{"version":3,"file":"static/js/random-picker-page.51cc348a.chunk.js","mappings":"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","sources":["pages/random-picker/random-picker.tsx"],"sourcesContent":["import { Button, FormControlLabel, Grid, Radio, RadioGroup, TextField, Typography } from '@mui/material';\nimport isString from 'lodash/isString';\nimport React, { useEffect, useState } from 'react';\n\nconst generateRandomNumber = (min: number, max: number): number => Math.floor(Math.random() * (max - min + 1) + min);\n\nconst generateRandomNumberWithExclusion = (min: number, max: number, list: Array<number>): number => {\n    const random = generateRandomNumber(min, max);\n    if (!list.includes(random)) {\n\n        return random;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    return generateRandomNumberWithExclusion(min, max, list);\n};\n\nexport const RandomPickerPage = () => {\n    const [startValue, setStartValue] = useState<number>(1);\n    const [endValue, setEndValue] = useState<number>(10);\n    const [randomNumber, setRandomNumber] = useState<number | null>(null);\n    const [repeat, setRepeat] = useState<boolean>(true);\n    const [randomNumberList, setRandomNumberList] = useState<Array<number>>([]);\n    const areValuesInvalid = endValue <= startValue\n\n    useEffect(() => {\n        const random = localStorage.getItem('randomNumber');\n        const randomList = localStorage.getItem('randomNumberList')?.split(', ').map(val => Number(val)) || [];\n        const getRepeat = localStorage.getItem('repeat');\n        const start = localStorage.getItem('startNumber')\n        const end = localStorage.getItem('endNumber')\n        !start && localStorage.setItem('startNumber', '1')\n        !end && localStorage.setItem('endNumber', '10')\n        !getRepeat && localStorage.setItem('repeat', 'true')\n        setStartValue(isString(start) ? Number(start) : 1);\n        setEndValue(isString(end) ? Number(end) : 10)\n        setRandomNumber(isString(random) ? Number(random) : null);\n        setRandomNumberList(randomList)\n        setRepeat(getRepeat === 'true');\n    }, [])\n\n\n    const handleChange = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>, component: string) => {\n        const value = event.target.value;\n\n        switch (component) {\n            case 'start':\n                setStartValue(Number(value));\n                localStorage.setItem('startNumber', value)\n                break;\n            case 'end':\n                setEndValue(Number(value));\n                localStorage.setItem('endNumber', value)\n                break;\n            default:\n                return;\n        }\n    }\n\n    const handleGenerate = () => {\n        if (repeat) {\n            const random = generateRandomNumber(startValue, endValue)\n            setRandomNumber(random);\n            localStorage.setItem('randomNumber', String(random));\n        } else {\n            const random = generateRandomNumberWithExclusion(startValue, endValue, randomNumberList);\n            const newList = [...randomNumberList, random]\n            setRandomNumberList(newList)\n            localStorage.setItem('randomNumberList', newList.join(', '));\n        }\n\n    }\n\n    const handleReset = () => {\n        localStorage.removeItem('randomNumber');\n        localStorage.removeItem('randomNumberList');\n        localStorage.setItem('repeat', 'true');\n        localStorage.setItem('startNumber', '1')\n        localStorage.setItem('endNumber', '10');\n        setRepeat(true);\n        setStartValue(1);\n        setEndValue(10);\n        setRandomNumber(null);\n        setRandomNumberList([]);\n    }\n\n    return <Grid container spacing={3} flexDirection=\"column\">\n        <Grid item>\n            <Typography variant='h4'>\n                Random Picker\n            </Typography>\n        </Grid>\n        <Grid item>\n            <Typography variant=\"body2\" marginBottom={1}>\n                Closing the page will <b>Reset</b> the data.\n            </Typography>\n            <RadioGroup\n                row\n                aria-labelledby=\"demo-radio-buttons-group-label\"\n                value={repeat}\n                onChange={() => {\n                    setRepeat((r) => !r);\n                    localStorage.setItem('repeat', String(!repeat));\n                }}\n            >\n                <FormControlLabel value={true} control={<Radio />} label=\"Repeat\" />\n                <FormControlLabel value={false} control={<Radio />} label=\"Do Not Repeat\" />\n            </RadioGroup>\n        </Grid>\n        <Grid container item spacing={3}>\n            <Grid item sm={5} xs={5}>\n                <TextField\n                    error={areValuesInvalid}\n                    label=\"Start number\"\n                    onChange={(e) => handleChange(e, 'start')}\n                    type=\"number\"\n                    value={startValue}\n                    variant=\"outlined\"\n                    helperText={areValuesInvalid ? 'End value cannot be less than start value' : undefined}\n                />\n            </Grid>\n            <Grid item sm={5} xs={5}>\n                <TextField\n                    error={areValuesInvalid}\n                    helperText={areValuesInvalid ? 'End value cannot be less than start value' : undefined}\n                    label=\"End number\"\n                    onChange={(e) => handleChange(e, 'end')}\n                    type=\"number\"\n                    value={endValue}\n                    variant=\"outlined\"\n                />\n            </Grid>\n        </Grid>\n        <Grid container item spacing={3}>\n            <Grid item>\n                <Button\n                    variant=\"contained\"\n                    onClick={handleGenerate}\n                    disabled={areValuesInvalid || (!repeat && endValue === randomNumberList.length)}>\n                    Generate\n                </Button>\n            </Grid>\n            <Grid item>\n                <Button\n                    variant=\"contained\"\n                    onClick={handleReset}\n                    disabled={!(randomNumber || randomNumberList)}>\n                    Reset\n                </Button>\n            </Grid>\n        </Grid>\n        {(repeat ? randomNumber : randomNumberList.length) &&\n            <Grid item>\n                <Typography variant='body1'>\n                    {repeat ? `Generated number is ${randomNumber}` : `Generated numbers are ${randomNumberList.join(', ')}`}\n                </Typography>\n            </Grid>\n        }\n        {!repeat && endValue === randomNumberList.length ?\n            <Grid item>\n                <Typography variant=\"h5\" marginBottom={2}>\n                    All numbers are generated\n                </Typography>\n            </Grid>\n            : null\n        }\n    </Grid>\n}"],"names":["generateRandomNumber","min","max","Math","floor","random","generateRandomNumberWithExclusion","list","includes","RandomPickerPage","useState","startValue","setStartValue","endValue","setEndValue","randomNumber","setRandomNumber","repeat","setRepeat","randomNumberList","setRandomNumberList","areValuesInvalid","useEffect","localStorage","getItem","randomList","split","map","val","Number","getRepeat","start","end","setItem","isString","handleChange","event","component","value","target","container","spacing","flexDirection","item","variant","marginBottom","row","onChange","r","String","control","label","sm","xs","error","e","type","helperText","undefined","onClick","newList","join","disabled","length","removeItem"],"sourceRoot":""}